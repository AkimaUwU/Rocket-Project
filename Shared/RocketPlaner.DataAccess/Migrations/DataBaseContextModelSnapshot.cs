// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketPlaner.DataAccess.DataBase;

#nullable disable

namespace RocketPlaner.DataAccess.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("RocketPlaner.Core.models.RocketTaskDestinations.RocketTaskDestination", b =>
                {
                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BelongsToId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChatId");

                    b.HasIndex("BelongsToId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("RocketPlaner.Core.models.RocketTasks.RocketTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("OwnerTelegramId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("FireDate", "RocketPlaner.Core.models.RocketTasks.RocketTask.FireDate#RocketTaskFireDate", b1 =>
                        {
                            b1.Property<DateTime>("FireDate")
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Message", "RocketPlaner.Core.models.RocketTasks.RocketTask.Message#RocketTaskMessage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "RocketPlaner.Core.models.RocketTasks.RocketTask.Title#RocketTaskTitle", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Type", "RocketPlaner.Core.models.RocketTasks.RocketTask.Type#RocketTaskType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.HasIndex("OwnerTelegramId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("RocketPlaner.Core.models.Users.User", b =>
                {
                    b.Property<long>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TelegramId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RocketPlaner.Core.models.RocketTaskDestinations.RocketTaskDestination", b =>
                {
                    b.HasOne("RocketPlaner.Core.models.RocketTasks.RocketTask", "BelongsTo")
                        .WithMany("Destinations")
                        .HasForeignKey("BelongsToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BelongsTo");
                });

            modelBuilder.Entity("RocketPlaner.Core.models.RocketTasks.RocketTask", b =>
                {
                    b.HasOne("RocketPlaner.Core.models.Users.User", "Owner")
                        .WithMany("Tasks")
                        .HasForeignKey("OwnerTelegramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RocketPlaner.Core.models.RocketTasks.RocketTask", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("RocketPlaner.Core.models.Users.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
